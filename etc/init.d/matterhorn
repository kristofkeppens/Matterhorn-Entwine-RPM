#!/bin/bash
#
# matterhorn      This shell script takes care of starting and stopping Matterhorn
#
# chkconfig: - 80 20
#
### BEGIN INIT INFO
# Provides: matterhorn
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Matterhorn 1.4 lecture capture and video processing system
# Short-Description: start and stop Matterhorn
 
# Source LSB function library.
if [ -r /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    echo "LSB function library missing"
    exit 1
fi
    
# Figure out which release we are running on
DISTRIB_ID=`lsb_release -i -s 2>/dev/null`
    
# Determin this service's name
NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi
           
# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser -s /bin/sh"
else
    SU="/bin/su -s /bin/sh"
fi
    
# Get the Matterhorn config (use this for environment specific settings)
MATTERHORN_CFG="/etc/matterhorn/matterhorn.conf"
if [ -r "$MATTERHORN_CFG" ]; then
    . $MATTERHORN_CFG
fi
# Verify if a proper node type has been configured
for PROFILE in worker engage admin;do
  if [ ${MATTERHORN_NODE_TYPE} = ${PROFILE} ];then
    VALID_NODE_TYPE=true
  fi
done
if [ -z "${VALID_NODE_TYPE+xxx}"  ];then
  echo "${NAME}:Improper Matterhorn node type configured in ${MATTERHORN_CFG}"
  echo "${NAME}:${MATTERHORN_NODE_TYPE} is not valid Matterhorn node type"
  exit 1
fi

# Verify $MATTERHORN_CONF_DIR/config.properties has been reviewed
#grep the value
CONFIG_REVIEW=$(grep com.entwine.configuration.review.done "${MATTERHORN_CONF_DIR}"/config.properties|cut -d'=' -f2|tr -d '[[:space:]]')
#exit on anything but true
if [ "${CONFIG_REVIEW}" != "true" ];then
  echo "${NAME}":It seems "${MATTERHORN_CONF_DIR}"/config.properties hasn\'t been verified
  echo "${NAME}":Please review "${MATTERHORN_CONF_DIR}"/config.properties keys and change com.entwine.configuration.review.done value to "true"
  exit 1
fi

# Get this service's instance specific config file
if [ -r "/etc/sysconfig/${NAME}" ]; then
    . /etc/sysconfig/${NAME}
fi

# Path to the Matterhorn launch script
MATTERHORN_SCRIPT="/opt/matterhorn/bin/matterhorn"

# Define the Matterhorn user
MATTERHORN_USER="${MATTERHORN_USER:-mh}"
            
# Define the Matterhorn group
MATTERHORN_GROUP="${MATTERHORN_GROUP:-mh}"
            
# Define the Matterhorn log directory
MATTERHORN_LOG_DIR="${MATTERHORN_LOG_DIR:-/var/log/${NAME}}"
        
# Define the Matterhorn home directory
MATTERHORN_HOME="${MATTERHORN_HOME:-/opt/matterhorn}"
        
# Define the Matterhorn configuration directory
MATTERHORN_CONF_DIR="${MATTERHORN_CONF_DIR:-/etc/matterhorn}"
        
# Define the Matterhorn configuration directory
FELIX_FILEINSTALL_DIR="${FELIX_FILEINSTALL_DIR:-/etc/matterhorn/load}"
    
# Define the Matterhorn pid file
MATTERHORN_PID_FILE="/var/run/${NAME}.pid"
       
# Define the Matterhorn lock file
MATTERHORN_LOCK_FILE="/var/lock/subsys/${NAME}"
    
RETVAL="0"

# Create the necessary directories
function makeDirectories() {
    mkdir -p /var/cache/${NAME} /var/log/${NAME} /var/tmp/${NAME}
    chown ${MATTERHORN_USER}:root /var/log/${NAME} /var/cache/${NAME} /var/tmp/${NAME} 
}

# Create a script that defines all of the currently set options as export
# variables for the Matterhorn start/stop script.
function parseOptions() {
    options=""
  
    # Add basic Matterhorn configuration
    options="$options $(awk '!/^#/ && !/^$/ { ORS=" "; print "export ", $0, ";" }' $MATTERHORN_CFG)"

    # Add service specific configuration
    if [ -r "/etc/sysconfig/${NAME}" ]; then
        options="$options $(awk '!/^#/ && !/^$/ { ORS=" "; print "export ", $0, ";" }' /etc/sysconfig/${NAME})"
    fi

    # Add some special options as defined in this script
    options="$options export MATTERHORN_HOME=\"$MATTERHORN_HOME\";"
    options="$options export MATTERHORN_USER=\"$MATTERHORN_USER\";"
    options="$options export MATTERHORN_GROUP=\"$MATTERHORN_GROUP\";"
    options="$options export MATTERHORN_PID_FILE=\"$MATTERHORN_PID_FILE\";"  
    options="$options export MATTERHORN_LOG_DIR=\"$MATTERHORN_LOG_DIR\";"
    options="$options export MATTERHORN_CONF_DIR=\"$MATTERHORN_CONF_DIR\";"
    options="$options export FELIX_FILEINSTALL_DIR=\"$FELIX_FILEINSTALL_DIR\";"

    MATTERHORN_SCRIPT="$options ${MATTERHORN_SCRIPT}"
}
        
# See how we were called.
function start() {
            
    MATTERHORN_INSTANCES="$(ps ax | grep felix.jar | grep -vc grep)"
         
    if [ $MATTERHORN_INSTANCES -ne 0 ]; then
        if [ -f "$MATTERHORN_PID_FILE" ]; then
            read pid < /var/run/${NAME}.pid
            log_warning_msg "${NAME} already running ($pid)"
        else
            log_failure_msg "Matterhorn already running (unknown pid)"
        fi
        RETVAL="4"
        return
    elif [ -f "$MATTERHORN_LOCK_FILE" ]; then
        log_failure_msg "Service startup locked by $MATTERHORN_LOCK_FILE"
        RETVAL="4"
        return
    elif [ -f "$MATTERHORN_PID_FILE" ]; then
        log_warning_msg "Removing orphaned pid file ${MATTERHORN_PID}"
    fi
        
    echo -n "Starting ${NAME}: "
    
    # Fix permissions on the log and pid files
    export MATTERHORN_PID_FILE="/var/run/${NAME}.pid"
    touch $MATTERHORN_PID_FILE 2>&1 || RETVAL="4"
    if [ "$RETVAL" -eq "0" -a "$?" -eq "0" ]; then
       chown ${MATTERHORN_USER}:${MATTERHORN_GROUP} $MATTERHORN_PID_FILE
    fi
    [ "$RETVAL" -eq "0" ] && mkdir -p "$MATTERHORN_LOG_DIR" 2>&1 || RETVAL="4"
    if [ "$RETVAL" -eq "0" -a "$?" -eq "0" ]; then
       chown -R ${MATTERHORN_USER}:${MATTERHORN_GROUP} $MATTERHORN_LOG_DIR
    fi
      
    # Create the Matterhorn directory if it doesn't exist
    if [ "$MATTERHORN_HOME" != "/opt/matterhorn" -a "$RETVAL" -eq "0" ]; then
         makeDirectories
    fi
          
    parseOptions
         
    # Finally, start Matterhorn
    if [ "$RETVAL" -eq "0" -a "$SECURITY_MANAGER" = "true" ]; then
       $SU - $MATTERHORN_USER -c "${MATTERHORN_SCRIPT} start-security" > /var/log/${NAME}/initd.out 2>&1 || RETVAL="4"
    else
       [ "$RETVAL" -eq "0" ] && $SU - $MATTERHORN_USER -c "${MATTERHORN_SCRIPT} start" > /var/log/${NAME}/initd.out 2>&1 || RETVAL="4"
    fi
            
    if [ "$RETVAL" -eq "0" ]; then
        log_success_msg
        touch /var/lock/subsys/${NAME}
    else
        log_failure_msg "Error code ${RETVAL}"
    fi
}
        
function stop() {
 
    MATTERHORN_INSTANCES="$(ps ax | grep felix.jar | grep -vc grep)"
    SHUTDOWN_WAIT=10   
    
    if [ -f "$MATTERHORN_PID_FILE" ] && [ $MATTERHORN_INSTANCES -eq 0 ]; then
       log_warning_msg "Removing unused pid and lock file"
       rm -f "$MATTERHORN_PID_FILE" "$MATTERHORN_LOCK_FILE"
       RETVAL="0"
       return
    fi
          
    echo -n "Stopping ${NAME}: "
          
    if [ ! -f "$MATTERHORN_PID_FILE" ] && [ $MATTERHORN_INSTANCES -ne 0 ]; then
       pid="$(ps ax | grep felix.jar | grep -v grep | awk '{ print $1 }')"
       log_failure_msg
       echo "Found orphaned running $NAME instances ($pid)"
       RETVAL="4"
    elif [ -f "$MATTERHORN_PID_FILE" ]; then
      read pid < "$MATTERHORN_PID_FILE"
      if [ -z "$pid" ]; then
          log_failure_msg
          echo "Service pid file $MATTERHORN_PID_FILE is empty"
          RETVAL="4"
          return
      fi
      parseOptions
      if [ "$RETVAL" -eq "0" ]; then
         touch $MATTERHORN_PID_FILE 2>&1 || RETVAL="4"
         [ "$RETVAL" -eq "0" ] && $SU - $MATTERHORN_USER -c "${MATTERHORN_SCRIPT} stop" >> /var/log/${NAME}/initd.out 2>&1 || RETVAL="4"
      fi
      if [ "$RETVAL" -eq "0" ]; then
         count="0"
         read pid < "$MATTERHORN_PID_FILE"
         until [ "$(ps --pid $pid | grep -c $pid)" -eq 0 ] || [ "$count" -gt $SHUTDOWN_WAIT ]; do
            if [ "$SHUTDOWN_VERBOSE" = "true" ]; then
               echo "waiting for processes $pid to exit"
            fi
            sleep 1
            let count="${count}+1"
         done
         if [ "$count" -gt $SHUTDOWN_WAIT ]; then
             if [ "$SHUTDOWN_VERBOSE" = "true" ]; then
                 log_warning_msg "Killing processes which did not stop after ${SHUTDOWN_WAIT} seconds"
             fi
             kill -9 $pid
         fi
         log_success_msg
        fi
       rm -f "$MATTERHORN_PID_FILE" "$MATTERHORN_LOCK_FILE"
    else
        log_success_msg
        RETVAL="0"
    fi
}
    
function status() {
   checkpidfile
   if [ "$RETVAL" -eq "0" ]; then
      log_success_msg "${NAME} (pid ${pid}) is running..." 
   elif [ "$RETVAL" -eq "1" ]; then
      log_failure_msg "PID file exists, but process is not running"
   else
      checklockfile
      if [ "$RETVAL" -eq "2" ]; then
         log_failure_msg "${NAME} lockfile exists but process is not running"
      else
         pid="$(/usr/bin/pgrep -d , -u ${MATTERHORN_USER} -G ${MATTERHORN_USER} java)"
         if [ -z "$pid" ]; then
             log_success_msg "${NAME} is stopped"
             RETVAL="3"
         else
             log_success_msg "${NAME} (pid $pid) is running..."
             RETVAL="0"
         fi
      fi    
  fi
}
        
function checklockfile() {
   if [ -f /var/lock/subsys/${NAME} ]; then
      pid="$(/usr/bin/pgrep -d , -u ${MATTERHORN_USER} -G ${MATTERHORN_USER} java)"
      # The lockfile exists but the process is not running
      if [ -z "$pid" ]; then
         RETVAL="2"
      fi
   fi
}
    
function checkpidfile() {
   if [ -f "/var/run/${NAME}.pid" ]; then
      read pid < /var/run/${NAME}.pid
      if [ -d "/proc/${pid}" ]; then
          # The pid file exists and the process is running
          RETVAL="0"
      else
          # The pid file exists but the process is not running
          RETVAL="1"
          return
      fi
   fi
  # pid file does not exist and program is not running
   RETVAL="3"
}
    
function usage() {
   echo "Usage: $0 {start|stop|restart|force-restart|status}"
   RETVAL="2"
}
          
# See how we were called.
RETVAL="0"
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart) 
        stop
        start
        ;;
    force-restart)
        if [ -f "/var/run/${NAME}.pid" ]; then
            stop
            start
        fi
        ;;
    status)
        status
        ;;
    *)
      usage
      ;;
esac

exit $RETVAL
